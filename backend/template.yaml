# backend/template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31 # Important for SAM specific syntax
Description: F13 Tech HRMS Backend - Automated Deployment with SAM

# Parameters allow you to pass dynamic values during deployment
Parameters:
  # This bucket is used by the document manager to store files
  S3DocumentsBucketName:
    Type: String
    Description: Name of the S3 bucket for HRMS documents.
    Default: f13tech-hrms-documents-youruniqueid # IMPORTANT: Use YOUR actual S3 bucket name
  # Cognito User Pool details for authentication
  CognitoUserPoolId:
    Type: String
    Description: The ID of the Cognito User Pool for authentication.
    # IMPORTANT: Replace with your actual Cognito User Pool ID from AWS Console
    Default: us-east-1_xxxxxxxxx # Example: us-east-1_ABCDEFG12
    NoEcho: true # Hides the value in CloudFormation console for security
  CognitoAppClientId:
    Type: String
    Description: The Client ID of the Cognito Public App for authentication.
    # IMPORTANT: Replace with your actual Cognito App Client ID (the Public Client)
    Default: 2l8toolk6fni2eed9km0d9ghgo # Example: 1a2b3c4d5e6f7g8h9i0j1k2l
    NoEcho: true

# Globals apply default settings to all functions unless overridden
Globals:
  Function:
    Timeout: 30 # Default timeout for all functions
    MemorySize: 128 # Default memory for all functions
    Environment: # These variables will be applied to ALL functions
      PROFILES_TABLE: HRMS_Profiles
      LEAVES_TABLE: HRMS_Leaves
      FEEDBACK_TABLE: HRMS_Feedback
      DOCUMENTS_TABLE: HRMS_Documents
      S3_BUCKET_NAME: !Ref S3DocumentsBucketName # Reference the Parameter defined above
      COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
      COGNITO_CLIENT_ID: !Ref CognitoAppClientId
    # Define IAM permissions for the Lambda execution role.
    # Using broad permissions for simplicity in setup. For production, apply least privilege.
    Policies:
      - AWSLambdaBasicExecutionRole # Allows Lambda to write logs to CloudWatch
      - AmazonDynamoDBFullAccess # Allows read/write to all DynamoDB tables
      - AmazonS3FullAccess # Allows full access to S3 (needed for document upload/download)
      - AmazonCognitoPowerUserAccess # Allows interaction with Cognito User Pools

Resources:
  # ----------------------------------------------------------------------
  # 1. DynamoDB Tables
  # ----------------------------------------------------------------------
  HRMSProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HRMS_Profiles
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST # Free tier friendly

  HRMSLeavesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HRMS_Leaves
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: leaveId # Assuming leaveId is a unique ID for each leave entry
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: leaveId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  HRMSFeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HRMS_Feedback
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: feedbackId # Assuming feedbackId is a unique ID for each feedback entry
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: feedbackId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  HRMSDocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HRMS_Documents
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: documentId # Assuming documentId is a unique ID for each document metadata entry
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: documentId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # ----------------------------------------------------------------------
  # 2. Lambda Functions
  #    CodeUri: points to the directory containing the Lambda's handler code
  #    Handler: points to the function within that code.
  # ----------------------------------------------------------------------

  # Auth Functions
  AuthRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthHandler_registeruser # Match your existing Lambda name if preferred
      CodeUri: backend/ # SAM will zip this folder and include it
      Handler: auth_handler.register_user
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
            RestApiId: !Ref HRMSApiGateway # Link to the API Gateway defined below
            Auth: NONE # Public endpoint, no authorization needed at API Gateway for signup

  AuthLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthHandler_loginuser # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: auth_handler.login_user
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth: NONE # Public endpoint

  AuthConfirmSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthHandler_confirmsignup # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: auth_handler.confirm_signup
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/confirm-signup
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth: NONE # Public endpoint

  AuthResendCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AuthHandler_resendcode # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: auth_handler.resend_code
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/resend-code
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth: NONE # Public endpoint

  # Profile Functions
  ProfileGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Profile_Manager_get_profile # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: profile_manager.get_profile
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /profile
            Method: get
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  ProfileUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Profile_Manager_update_profile # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: profile_manager.update_profile
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /profile
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  # Leave Functions
  LeaveSubmitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Leave_manager_submit_leave # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: leave_manager.submit_leave
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /leaves
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  LeaveGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Leave_manager_get_leaves # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: leave_manager.get_leaves
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /leaves
            Method: get
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  # Feedback Functions
  FeedbackSubmitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Feedback_manager_submit_feedback # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: feedback_manager.submit_feedback
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /feedback
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  FeedbackGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Feedback_manager_get_feedback # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: feedback_manager.get_feedback
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /feedback
            Method: get
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  # Document Functions
  DocumentUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Document_manager_upload_document # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: document_manager.upload_document
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents # Assuming this is now the path for metadata saving
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  DocumentGetPresignedUrlFunction: # NEW Lambda for pre-signed URL
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Document_manager_get_presigned_url # New Lambda name
      CodeUri: backend/
      Handler: document_manager.get_presigned_upload_url
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents/presigned-url # New API Gateway path
            Method: post
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  DocumentGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Document_manager_get_documents # Match your existing Lambda name if preferred
      CodeUri: backend/
      Handler: document_manager.get_documents
      Runtime: python3.9
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents
            Method: get
            RestApiId: !Ref HRMSApiGateway
            Auth:
              Authorizer: CognitoUserPoolAuthorizer # Protected endpoint

  # ----------------------------------------------------------------------
  # 3. API Gateway
  # ----------------------------------------------------------------------
  HRMSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: F13HRMSApi # Match your existing API Gateway name
      StageName: prod # Your deployment stage
      DefinitionBody: # Define API structure using OpenAPI (Swagger)
        openapi: 3.0.1
        info:
          title: !Sub "${AWS::StackName}-API"
          version: '1.0'
        paths:
          /auth/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthRegisterFunction.Arn}/invocations"
          /auth/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLoginFunction.Arn}/invocations"
          /auth/confirm-signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthConfirmSignupFunction.Arn}/invocations"
          /auth/resend-code:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthResendCodeFunction.Arn}/invocations"
          /profile:
            get:
              security:
                - CognitoUserPoolAuthorizer: [] # Link to security scheme
              x-amazon-apigateway-integration:
                httpMethod: POST # Lambda proxy always receives POST from API Gateway
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileGetFunction.Arn}/invocations"
            post:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileUpdateFunction.Arn}/invocations"
          /leaves:
            get:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LeaveGetFunction.Arn}/invocations"
            post:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LeaveSubmitFunction.Arn}/invocations"
          /feedback:
            get:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedbackGetFunction.Arn}/invocations"
            post:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FeedbackSubmitFunction.Arn}/invocations"
          /documents: # For GET documents metadata and POST document metadata after S3 upload
            get:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentGetFunction.Arn}/invocations"
            post:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentUploadFunction.Arn}/invocations"
          /documents/presigned-url: # New endpoint for getting presigned URL
            post:
              security:
                - CognitoUserPoolAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentGetPresignedUrlFunction.Arn}/invocations"

        components:
          securitySchemes:
            CognitoUserPoolAuthorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                # IMPORTANT: Reference your EXISTING Cognito User Pool's ARN
                providerARNs:
                  - !Sub "arn:aws:cognito-idp:${AWS::Region}:YOUR_AWS_ACCOUNT_ID:userpool/${CognitoUserPoolId}"

      Cors: # Enable CORS globally for the API (replace * with your frontend URL in production)
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  # ----------------------------------------------------------------------
  # 4. Existing Cognito User Pool (Referencing it by ID from Parameter)
  #    SAM needs to know about your User Pool to configure the API Gateway Authorizer.
  #    We are NOT creating a new User Pool here, just linking to your existing one.
  # ----------------------------------------------------------------------
  ExistingCognitoUserPool:
    Type: AWS::CloudFormation::Stack # Use CloudFormation Stack to reference external resource
    Properties:
      TemplateURL: !Sub "https://s3.${AWS::Region}.amazonaws.com/cloudformation-templates-us-east-1/Cognito_UserPool.yaml" # Dummy template
      Parameters:
        UserPoolId: !Ref CognitoUserPoolId # Pass your User Pool ID as a parameter
    Metadata:
      # This is a workaround to make SAM/CloudFormation reference an existing User Pool by ID
      # without actually trying to create or manage it. The `TemplateURL` points to a dummy
      # or a minimal template that takes the UserPoolId. A simpler alternative if your Cognito
      # User Pool is created manually is to simply provide the ARN directly in the providerARNs above
      # and remove this `ExistingCognitoUserPool` resource entirely if you only need the ARN.
      # For this scenario, if your CognitoUserPoolId parameter is directly your User Pool ID,
      # and not an ARN, then the providerARNs needs to be constructed with !Sub "arn:aws:cognito-idp:${AWS::Region}:YOUR_AWS_ACCOUNT_ID:userpool/${CognitoUserPoolId}"
      # which is already provided above. So, you might not even need this `ExistingCognitoUserPool` block.
      # Let's simplify and assume the providerARNs correctly constructs the ARN from the UserPoolId parameter.

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${HRMSApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
